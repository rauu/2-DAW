//Crear un conjunto de promesas que deban resolverse ambas para continuarcon su ejecución 


/*const p1 = fetch('https://jsonplaceholder.typicode.com/users').then(response => {
    return response.json();
}).then(data => {
    return data;
}).catch(err => {
    console.log(err);
});




const p2 = fetch('https://jsonplaceholder.typicode.com/posts').then(response => {
    return response.json();
}).then(data => {
    return data;
}).catch(err => {
    console.log(err);
});


Promise.all([p1, p2]).then(
    value => {
        console.log(value);
    }
);*/





//Crear un conjunto de promesas ​​que deban resolverse ambas para continuarcon su ejecución usando la estructura Async/Await ​(3.5pts)
//Crear un select con una parte de los resultados obtenidos en una de laspeticiones y en base al opción seleccionada mostrar los contenidosrelacionados de la segunda consulta. (3pts)




/*async function loadJsonUser(url) {
    let response = await fetch(url);
    if (response.status == 200) {
        let json = await response.json();
        return json;
    }
    thrownewError(response.status);
}
loadJsonUser('https://jsonplaceholder.typicode.com/users')
    .then(j => {
        console.log(j);
    }).catch(e => {
        console.log(e);
    });



async function loadJsonPost(url) {
    let response = await fetch(url);
    if (response.status == 200) {
        let json = await response.json();
        return json;
    }
    thrownewError(response.status);
}
loadJsonPost('https://jsonplaceholder.typicode.com/posts')
    .then(j => {
        console.log(j);
        return j;
    }).catch(e => {
        console.log(e);
    });
*/

let select = document.createElement('select');
select.options[0] = new Option("--", "--");

async function loadJsonUser(url) {
    let response = await fetch(url);
    if (response.status == 200) {
        let json = await response.json();
        return json;
    }
    thrownewError(response.status);
}
window.onload = loadJsonUser('https://jsonplaceholder.typicode.com/users')
    .then(j => {
        console.log(j);
        for (let x = 0; x < j.length; x++) {
            select.options[x + 1] = new Option(j[x].username, j[x].id);
        }
        document.body.appendChild(select);
    }).catch(e => {
        console.log(e);
    });

async function loadJsonPost(url) {
    let response = await fetch(url);
    if (response.status == 200) {
        let json = await response.json();
        return json;
    }
    thrownewError(response.status);
}


function tabla() {
    let table = document.createElement('table');
    let tr = document.createElement('tr');
    let th_titulo = document.createElement('th');
    let th_cuerpo = document.createElement('th');
    let new_tbody = document.createElement('tbody');


    th_titulo.innerHTML = "Titular";
    th_cuerpo.innerHTML = "Cuerpo";

    tr.appendChild(th_titulo);
    tr.appendChild(th_cuerpo);
    table.appendChild(th_titulo);
    table.appendChild(th_cuerpo);

    select.onchange = () => {
        /*td.innerHTML = "sdf";
        tr.appendChild(td);*/
        loadJsonPost('https://jsonplaceholder.typicode.com/posts')
            .then(j => {
                console.log(j);
                for (let x = 0; x < j.length; x++) {
                    if (j[x].userId == select.value) {
                        let td_titular = document.createElement('td');
                        let td_cuerpo = document.createElement('td');
                        let tr_body = document.createElement('tr');
                        td_titular.innerHTML = j[x].title;
                        td_cuerpo.innerHTML = j[x].body;
                        tr_body.appendChild(td_titular);
                        tr_body.appendChild(td_cuerpo);
                        new_tbody.appendChild(tr_body);
                        table.appendChild(new_tbody);
                        //table.appendChild(tr_body);


                    }
                }


            }).catch(e => {
                console.log(e);
            });

    };
    table.appendChild(tr);

    document.body.appendChild(table);
}

window.onload = tabla();





















<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Prctica 3</title>
    <script src="../JS/script.js" defer></script>
</head>

<body>

</body>

</html>